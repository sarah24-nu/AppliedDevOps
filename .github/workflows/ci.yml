name: CI/CD Pipeline for Authentication Project

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Run Linter Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run Flake8 on Backend
        run: flake8 backend --max-line-length=120

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install ESLint
        run: |
          cd frontend
          npm install eslint --save-dev

      - name: Run ESLint on Frontend
        run: cd frontend && npx eslint . --ext .js,.jsx,.ts,.tsx

  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: lint  # Run only if linting succeeds

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin


      - name: Build & Push Backend Image
        run: |
          docker build -t assignment1_backend backend
          docker tag assignment1_backend muhiman/my-backend:latest
          docker push muhiman/my-backend:latest

      - name: Build & Push Frontend Image
        run: |
          docker build -t assignment1_frontend frontend
          docker tag assignment1_frontend muhiman/my-frontend:latest
          docker push muhiman/my-frontend:latest

      - name: Use Official MongoDB Image (Instead of Building)
        run: |
          docker pull mongo:latest
          docker tag mongo muhiman/my-mongo:latest
          docker push muhiman/my-mongo:latest

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: build-and-push  # Run only if build succeeds

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/backend" >> $GITHUB_ENV

      - name: Run Unit Tests
        run: |
          if [ -d "backend/tests" ]; then
            pytest backend/tests --maxfail=1 --disable-warnings
          else
            echo "No tests found. Skipping pytest."
          fi



      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install

     

  security:
    name: Security Scan & SAST
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy Vulnerability Scan (Backend)
        run: docker run --rm aquasec/trivy image muhiman/my-backend:latest

      - name: Run Trivy Vulnerability Scan (Frontend)
        run: docker run --rm aquasec/trivy image muhiman/my-frontend:latest

      - name: Run Trivy Vulnerability Scan (MongoDB)
        run: docker run --rm aquasec/trivy image muhiman/my-mongo:latest

  
