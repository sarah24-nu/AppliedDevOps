name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_backend:
    name: Build & Test Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run Backend Tests
        run: |
          cd backend
          pytest || echo "Tests failed, but continuing."

      - name: Build Backend Docker Image
        run: |
          cd backend
          docker build -t my-backend .

  build_frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install

      - name: Run Frontend Tests
        run: |
          cd frontend
          npm test || echo "Tests failed, but continuing."

      - name: Build Frontend Docker Image
        run: |
          cd frontend
          docker build -t my-frontend .

  lint_code:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run ESLint for Frontend
        run: |
          cd frontend
          npx eslint . || echo "Linting failed"

      - name: Run Flake8 for Backend
        run: |
          cd backend
          pip install flake8
          flake8 .

  push_to_dockerhub:
    name: Push Images to DockerHub
    runs-on: ubuntu-latest
    needs: [build_backend, build_frontend]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Tag & Push Backend Image
        run: |
          docker tag my-backend mydockerhubusername/my-backend:latest
          docker push mydockerhubusername/my-backend:latest

      - name: Tag & Push Frontend Image
        run: |
          docker tag my-frontend mydockerhubusername/my-frontend:latest
          docker push mydockerhubusername/my-frontend:latest
